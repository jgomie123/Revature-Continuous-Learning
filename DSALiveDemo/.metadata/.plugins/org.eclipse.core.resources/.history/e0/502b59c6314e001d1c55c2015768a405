package queuefromscratch;

/*A queue is a linear data structure that follows a FIFO (first in first out) order.
 * A queue is open-ended, meaning that you can one end is for inserting  the data 
 * and the other end is for deleting the data (enqueue and dequeue)
 * 
 * You would use  a quueue when you need to hold elments oprior to processing 
 * 
 * if you look at the Collection framwork for queue, queues provide additional insertion, extration, and inspection 
 * operations. Each of these methods exist in 2 forms, one throws an exception if the operations fails
 * the other returns a value (either null or false depending on the operations). 
 * 
 * There is one exception to the FIFO - PriorityQueue's implementation is one where elements are ordered according
 * to a supplied comparator, or the element's natural ordering. 
 * 
 * */

public class SimpleQueue {
	
	private long [] queueArray; //this is going to hold the main data for my queue
	private int maxSize; //for the set number of slots in my queue
	private int front; //this will be the index position foer the element in th3 front
	private int rear; //keep track of the last element
	private int qItems; //a counter to maintain the number of items in our queue
	
	public SimpleQueue(int size) {
		
	}
	
	
	
	

}
